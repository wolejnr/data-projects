{
  
    
        "post0": {
            "title": "Building the Boston Crime Database",
            "content": "import psycopg2 # Connect to dq database and create new database conn = psycopg2.connect(dbname=&quot;dq&quot;, user=&quot;dq&quot;) conn.autocommit = True cursor = conn.cursor() cursor.execute(&quot;CREATE DATABASE crime_db;&quot;) conn.commit() conn.close() conn = psycopg2.connect(dbname=&quot;crime_db&quot;, user=&quot;dq&quot;) cursor = conn.cursor() cursor.execute(&quot;CREATE SCHEMA crimes;&quot;) . ProgrammingErrorTraceback (most recent call last) &lt;ipython-input-25-227e93eec992&gt; in &lt;module&gt;() 5 conn.autocommit = True 6 cursor = conn.cursor() -&gt; 7 cursor.execute(&#34;CREATE DATABASE crime_db;&#34;) 8 conn.commit() 9 conn.close() ProgrammingError: database &#34;crime_db&#34; already exists . import csv with open(&#39;boston.csv&#39;) as file: reader = csv.reader(file) col_headers = next(reader) first_row = next(reader) print(col_headers) print(first_row) . [&#39;incident_number&#39;, &#39;offense_code&#39;, &#39;description&#39;, &#39;date&#39;, &#39;day_of_the_week&#39;, &#39;lat&#39;, &#39;long&#39;] [&#39;1&#39;, &#39;619&#39;, &#39;LARCENY ALL OTHERS&#39;, &#39;2018-09-02&#39;, &#39;Sunday&#39;, &#39;42.35779134&#39;, &#39;-71.13937053&#39;] . import csv def get_col_value_set(csv_file, col_index): col_values = set() with open(csv_file) as f: reader = csv.reader(f, delimiter=&quot;,&quot;, skipinitialspace=True) next(reader) #skip the header for row in reader: col_values.add(row[col_index]) return col_values for x in range(7): unique_col_values = get_col_value_set(&#39;boston.csv&#39;, x) print(&quot;Column&quot;, x, &quot;has&quot;, len(unique_col_values), &quot;unique values:&quot;) # print(unique_col_values) . Column 0 has 298329 unique values: Column 1 has 219 unique values: Column 2 has 239 unique values: Column 3 has 1177 unique values: Column 4 has 7 unique values: Column 5 has 18177 unique values: Column 6 has 18177 unique values: . print(col_headers) # Determine the maximum length of a given column col_values = get_col_value_set(&#39;boston.csv&#39;, 6) max_len = 0 max_val = &#39;&#39; for val in col_values: length = len(val) if length &gt; max_len: max_len = length max_val = val print(&quot;Max length:&quot;, max_len) print(&quot;Value with maximum length:&quot;, max_val) . [&#39;incident_number&#39;, &#39;offense_code&#39;, &#39;description&#39;, &#39;date&#39;, &#39;day_of_the_week&#39;, &#39;lat&#39;, &#39;long&#39;] Max length: 12 Value with maximum length: -71.05260013 . Based on the analysis of each column value from the CSV file, in creating the database tables, . incident_number will be integer | offense_code will be varchar(4) | description will be varchar(58) | date will be date | day_of_the_week will be an ENUM | lat will be numeric | long will be numeric | . import psycopg2 conn = psycopg2.connect(dbname=&quot;crime_db&quot;, user=&quot;dq&quot;) conn.autocommit = True cursor = conn.cursor() cursor.execute(&quot;CREATE TYPE weekday AS ENUM(&#39;Sunday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;);&quot;) conn.commit() conn.close() . ProgrammingErrorTraceback (most recent call last) &lt;ipython-input-29-89764a8e6bdb&gt; in &lt;module&gt;() 5 conn.autocommit = True 6 cursor = conn.cursor() -&gt; 7 cursor.execute(&#34;CREATE TYPE weekday AS ENUM(&#39;Sunday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;);&#34;) 8 conn.commit() 9 conn.close() ProgrammingError: type &#34;weekday&#34; already exists . conn = psycopg2.connect(dbname=&quot;crime_db&quot;, user=&quot;dq&quot;) conn.autocommit = True cursor = conn.cursor() # cursor.execute(&quot;CREATE SCHEMA crimes;&quot;) cursor.execute(&quot;&quot;&quot; CREATE TABLE crimes.boston_crimes ( incident_number integer PRIMARY KEY, offense_code VARCHAR(4), description VARCHAR(58), incidence_date DATE, day_of_the_week weekday, lat numeric, long numeric ); &quot;&quot;&quot;) conn.commit() conn.close() . conn = psycopg2.connect(dbname=&quot;crime_db&quot;, user=&quot;dq&quot;) conn.autocommit = True cursor = conn.cursor() with open(&quot;boston.csv&quot;) as f: cursor.copy_expert(&quot;COPY crimes.boston_crimes FROM STDIN WITH CSV HEADER;&quot;, f) conn.commit() conn.close() . conn = psycopg2.connect(dbname=&quot;crime_db&quot;, user=&quot;dq&quot;) conn.autocommit = True cursor = conn.cursor() # Revoke all privileges on the crimes_db by the public group cursor.execute(&quot;REVOKE ALL ON SCHEMA public FROM public;&quot;) cursor.execute(&quot;REVOKE ALL ON DATABASE crime_db FROM public;&quot;) # Create two user groups cursor.execute(&quot;CREATE GROUP readonly NOLOGIN;&quot;) cursor.execute(&quot;CREATE GROUP readwrite NOLOGIN;&quot;) # Grant CONNECT privilege to both user groups cursor.execute(&quot;GRANT CONNECT ON DATABASE crime_db TO readonly;&quot;) cursor.execute(&quot;GRANT CONNECT ON DATABASE crime_db TO readwrite;&quot;) # Grant USAGE of crimes schema to both user groups cursor.execute(&quot;GRANT USAGE ON SCHEMA crimes TO readonly;&quot;) cursor.execute(&quot;GRANT USAGE ON SCHEMA crimes TO readwrite;&quot;) # Grant group specific privileges to the user groups cursor.execute(&quot;GRANT SELECT ON ALL TABLES IN SCHEMA crimes TO readonly;&quot;) cursor.execute(&quot;GRANT SELECT, INSERT, DELETE, UPDATE ON ALL TABLES IN SCHEMA crimes TO readwrite;&quot;) # Create user called data_analyst and assign the user to readonly group cursor.execute(&quot;CREATE USER data_analyst WITH PASSWORD &#39;secret1&#39;;&quot;) cursor.execute(&quot;GRANT readonly TO data_analyst;&quot;) # Create user called data_scientist and assign the user to readwrite group cursor.execute(&quot;CREATE USER data_scientist WITH PASSWORD &#39;secret2&#39;;&quot;) cursor.execute(&quot;GRANT readwrite TO data_scientist;&quot;) conn.commit() conn.close() . conn = psycopg2.connect(dbname=&quot;crime_db&quot;, user=&quot;dq&quot;) conn.autocommit = True cursor = conn.cursor() cursor.execute(&quot;SELECT grantee, privilege_type FROM information_schema.table_privileges WHERE grantee=&#39;readwrite&#39;;&quot;) cursor.fetchall() . [(&#39;readwrite&#39;, &#39;INSERT&#39;), (&#39;readwrite&#39;, &#39;SELECT&#39;), (&#39;readwrite&#39;, &#39;UPDATE&#39;), (&#39;readwrite&#39;, &#39;DELETE&#39;)] . cursor.execute(&quot;SELECT grantee, privilege_type FROM information_schema.table_privileges WHERE grantee=&#39;readonly&#39;;&quot;) cursor.fetchall() . [(&#39;readonly&#39;, &#39;SELECT&#39;)] .",
            "url": "https://wolejnr.github.io/data-projects/2021/01/08/Basics.html",
            "relUrl": "/2021/01/08/Basics.html",
            "date": " • Jan 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://wolejnr.github.io/data-projects/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://wolejnr.github.io/data-projects/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://wolejnr.github.io/data-projects/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://wolejnr.github.io/data-projects/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}